# arm_learner
# learner parameters
[learner]
# mode = vel
# mode = bump
mode = ramp
# mode = PIDvel
# tau = 0.01
# tau = 0.1
tau = 0.2
# tau = 0.9
# tau = 0.3
# tau = 0.2, (works), 0.4, 0.8
# tau = 0.9
# tau = 1.0
# smaller ok too?
# eta_EH = 1e-2
# > 1. try that, 1.1 works very nicely, need to tune eta respectively
# all of g = {0.001, 0.01, 1.1, 1.2} works well
# g = 10
# g = 2.
# g = 1.5
# g = 1.2
# g = 1.1
g = 0.999
# g = 0.9
# g = 0.7
# g = 0.5
# g = 0.3
# g = 0.01
# g = 0.001 
# g = 0.
# immediate action
# lag = 0 
# lag = 1
# lag = 2
lag = 6
# delayed action
# lag = 20
# learning exploration noise amplitude

# # config for PI learning
# res_theta = 1e-1
# eta_EH = 1e-3

# res_theta = 1e-1, went nice with eta = 1e-3 and g_pos
# res_theta = 1e-3
# res_theta = 1e0
# res_theta = 5e-1
res_theta = 1e-1
# res_theta = 1e-2
# res_theta = 0.
# eta_EH = 1e-1
eta_EH = 1e-2
# eta_EH = 5e-2
# eta_EH = 8e-2
# eta_EH = 5e-3
# eta_EH = 4e-3
# eta_EH = 2e-3
# eta_EH = 1e-3
# eta_EH = 5e-4
# eta_EH = 1e-4

# # this works even tighter
# res_theta = 1e-0
# eta_EH = 2e-4

# # this works even tighter
# res_theta = 1e-1
# eta_EH = 1e-4

# this is something else
# eta_EH = 7.5e-3
# eta_EH = 5e-3
# eta_EH = 1e-4
# eta_EH = 1e-5
target = 0.4
# target = -0.7
res_input_scaling = 1.
# # 005
res_feedback_scaling = .0
res_bias_scaling = 0.1
# find appropriate output scaling with simple covariance based gain matching
res_output_scaling = 100.
# res_output_scaling = 6.28
# output_scaling = 4096
# output_scaling = 4200
# output_scaling = 6000.
# output_scaling = 5000.
# network input dimensionality
# sphero: 3 orientation, 3 ang vel, 3 linear acc, 2 pos, 2 vel
network_idim = 2
# network output dimensionality
network_odim = 1
# gives the indices of those input channels which are selected, is extendible
# for dim=1
input_coupling_mtx = {0: 1.}
# # for dim=2
# input_coupling_mtx = {0: 1., 1: 1., 2: 1., 3: 1.}
# input_coupling_mtx = {0: 0.1, 0: 0.1, 2: 0.1}
nonlin_func = np.tanh
# nonlin_func = lambda x: x

# new entries for updating all config files
# network size
network_size = 100
# network connection density
p = 0.1
# network state noise amplitude / regularization
network_theta_state = 1e-2
# network_theta_state = 1e-12
coeff_a = 0.2
use_ip = 0
use_pre = 0
pre_inputs = []
pre_delay = []
use_et = 1
et_winsize = 10
use_anneal = 1
anneal_const = 2500.
use_mt = 0
use_density = 0
density_mode = 0
use_wb = 0
wb_thr = 1.
do_savelogs = 0
pm_mass = 1.
# experiment parameters
[experiment]
# episode length
# len_episode=500
len_episode=2040
len_washout = 10
ratio_testing = 0.8
anneal_const = 200000.
tp_perturbation = {}
tp_target = {"ramp": 1}
target_interval = 5000
