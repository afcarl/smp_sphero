#+TITLE: README smp_sphero / Sensorimotor learning experiments with the Sphero

#+OPTIONS: toc:nil ^:nil


* Sensorimotor learning experiments with the Sphero robot (smp_sphero)

05/2014 - 2017, Oswald Berthold

Python code from the Closed-loop sphero behaviour paper [fn:2].

** Preparation

 This is built on top of the following stacks, make sure to have that
 installed (tested only on Ubuntu) 
  - python-numpy, python-bluetooth, ... Use apt-get / distro mechanism
  - ROS base install, use apt-get
  - sphero_ros driver from [fn:1], install via $ROSDISTRO_workspace
    catkin_make. See the ROS wiki how to set up a catkin workspace.


 This is the launch sequence for talking to sphero with the ros driver:

 : roscore    
 : python src/sphero_ros/sphero_node/nodes/sphero.py

 sphero.py accepts arguments such as update frequency sensorimotor loop
 and now also a BT target address to connect directly to a given device

 : python src/sphero_ros/sphero_node/nodes/sphero.py --freq 10
    
 : python src/sphero_ros/sphero_node/nodes/sphero.py --freq 20 --target_addr sp:he:ro:sa:dd:re

 Optionally, e.g. for sphero_joystick.py, you need
 : rosrun joy joy_node

** Scripts

 # generate with C-u M-!

 # these needs to be cleaned up, unfinished projects
 # | atrv-1D.py                            |   |
 # | interactive_integrated.py             |   |
 # | interactive.py                        |   |
 # | sphero-1D.py                          |   |
 # | sphero1.py                            |   |
 # | sphero-closed-loop.py                 |   |
 # | sphero_res_learner2.py                |   |
 # | sphero_res_learner2_analyze.py        |   |
 # | sphero_res_learner.py                 |   |
 # | weight_bounding.py                    |   |
 # | sphero_hk.py                          |   |

When roscore and sphero.py are running and connected, try and and run
a few of the utils/test to check the basic communication.

 |----------------------------------+--------------------------------------------|
 | *Utils*                          |                                            |
 |----------------------------------+--------------------------------------------|
 | bluerssi.py                      | Log BT rssi values                         |
 | sphero_colors.py                 | Basic color actuation with ros             |
 | sphero_joystick.py               | Control sphero via ros joy_node            |
 | sphero_raw.py                    | Minimal test of raw communication protocol |
 | sphero_simple_openloop.py        | Simple open-loop command test              |
 | sphero_test.py                   | Another minimal test                       |

*** Work in progress

When that works, you could try the learning experiments, just to
disentangle possible sources of errors. *<2017-02-28 Tue> - This
doesn't work yet*: It needs more cleaning work on my side, hope to be
done soon.

 |----------------------------------+--------------------------------------------|
 | *Experiments*                    |                                            |
 |----------------------------------+--------------------------------------------|
 | sphero_res_learner_1D.py         |                                            |
 | sphero_res_learner_2D_polar.py   |                                            |
 | sphero_res_learner_2D.py         |                                            |
 | sphero_res_learner_1D_analyze.py |                                            |
 | sphero_data_recorder.py          |                                            |

* Footnotes

[fn:2] Berthold and Hafner, 2015, Closed-loop acquisition of behaviour on the Sphero robot, https://mitpress.mit.edu/sites/default/files/titles/content/ecal2015/ch084.html

[fn:1] https://github.com/x75/sphero_ros
